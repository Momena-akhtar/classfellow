openapi: 3.0.0
info:
  title: ClassFellow API
  version: 1.0.0
  description: Real-time note-taking app for lectures with AI-powered summaries and transcriptions
  contact:
    name: ClassFellow API
servers:
  - url: http://localhost:5500/api
    description: Development server
paths:
  # Auth endpoints
  /auth/signup:
    post:
      summary: Register a new student
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
            example:
              email: momen@gmail.com
              password: password123
              name: Momena
              university: NUST
              photo: https://example.com/photo.jpg
      responses:
        "201":
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              example:
                success: true
                message: Student created successfully
                student:
                  id: 507f1f77bcf86cd799439011
                  email: momen@gmail.com
                  name: Momena
                  university: NUST
                  photo: https://example.com/photo.jpg
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: Email, password, name, and university are required
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/login:
    post:
      summary: Login student
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              email: momen@gmail.com
              password: password123
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              example:
                success: true
                message: Login successful
                student:
                  id: 507f1f77bcf86cd799439011
                  email: momen@gmail.com
                  name: Momena
                  university: NUST
                  photo: https://example.com/photo.jpg
          headers:
            Set-Cookie:
              description: JWT token stored in httpOnly cookie
              schema:
                type: string
                example: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: Invalid email or password
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/logout:
    post:
      summary: Logout student
      tags: [Authentication]
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully
          headers:
            Set-Cookie:
              description: JWT token cookie cleared
              schema:
                type: string
                example: token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT
        "401":
          description: Unauthorized - token required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: Access token required
  /auth/profile:
    get:
      summary: Get current student profile
      tags: [Authentication]
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Student profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  student:
                    $ref: "#/components/schemas/Student"
              example:
                success: true
                student:
                  id: 507f1f77bcf86cd799439011
                  email: momen@gmail.com
                  name: Momena
                  university: NUST
                  photo: https://example.com/photo.jpg
                  courses: ["507f1f77bcf86cd799439012"]
        "401":
          description: Unauthorized - token required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: Access token required

  # Course endpoints
  /courses:
    post:
      summary: Create a new course
      tags: [Courses]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseRequest"
            example:
              name: "Advanced Mathematics"
              description: "Advanced calculus and linear algebra"
              books: []
      responses:
        "201":
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: Get all courses
      tags: [Courses]
      responses:
        "200":
          description: Courses retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoursesResponse"
  /courses/{id}:
    get:
      summary: Get course by ID
      tags: [Courses]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Course retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseResponse"
        "404":
          description: Course not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update course
      tags: [Courses]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseRequest"
      responses:
        "200":
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseResponse"
        "404":
          description: Course not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete course
      tags: [Courses]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Course deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Course deleted successfully"
        "404":
          description: Course not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /courses/{id}/books:
    get:
      summary: Get course with books
      tags: [Courses]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Course with books retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseWithBooksResponse"
        "404":
          description: Course not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Book endpoints
  /books:
    post:
      summary: Create a new book
      tags: [Books]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookRequest"
            example:
              name: "Calculus Textbook"
              pdfUrl: "https://example.com/calculus.pdf"
              course: "507f1f77bcf86cd799439011"
      responses:
        "201":
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: Get all books
      tags: [Books]
      responses:
        "200":
          description: Books retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BooksResponse"
  /books/{id}:
    get:
      summary: Get book by ID
      tags: [Books]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update book
      tags: [Books]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookRequest"
      responses:
        "200":
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete book
      tags: [Books]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Book deleted successfully"
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /books/course/{courseId}:
    get:
      summary: Get books by course
      tags: [Books]
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Books retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BooksResponse"

  # Note endpoints
  /notes:
    post:
      summary: Create a new note
      tags: [Notes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NoteRequest"
            example:
              session: "507f1f77bcf86cd799439011"
              content: "This is an important concept"
              timestamp: 120
              order: 1
              type: "text"
      responses:
        "201":
          description: Note created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: Get all notes
      tags: [Notes]
      responses:
        "200":
          description: Notes retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotesResponse"
  /notes/{id}:
    get:
      summary: Get note by ID
      tags: [Notes]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Note retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteResponse"
        "404":
          description: Note not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update note
      tags: [Notes]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NoteRequest"
      responses:
        "200":
          description: Note updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteResponse"
        "404":
          description: Note not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete note
      tags: [Notes]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Note deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Note deleted successfully"
        "404":
          description: Note not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /notes/session/{sessionId}:
    get:
      summary: Get notes by session
      tags: [Notes]
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Notes retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotesResponse"
  /notes/session/{sessionId}/type/{type}:
    get:
      summary: Get notes by type within session
      tags: [Notes]
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum: [text, ai_summary, ai_explanation, highlight]
      responses:
        "200":
          description: Notes retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotesResponse"
  /notes/session/{sessionId}/reorder:
    put:
      summary: Reorder notes within session
      tags: [Notes]
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                noteIds:
                  type: array
                  items:
                    type: string
              example:
                noteIds:
                  ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439012"]
      responses:
        "200":
          description: Notes reordered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotesResponse"

components:
  schemas:
    # Course schemas
    Course:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Advanced Mathematics"
        description:
          type: string
          example: "Advanced calculus and linear algebra"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CourseRequest:
      type: object
      required: ["name"]
      properties:
        name:
          type: string
          example: "Advanced Mathematics"
        description:
          type: string
          example: "Advanced calculus and linear algebra"
    CourseResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Course created successfully"
        course:
          $ref: "#/components/schemas/Course"
    CoursesResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Courses retrieved successfully"
        courses:
          type: array
          items:
            $ref: "#/components/schemas/Course"
    CourseWithBooksResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Course with books retrieved successfully"
        course:
          allOf:
            - $ref: "#/components/schemas/Course"
            - type: object
              properties:
                books:
                  type: array
                  items:
                    $ref: "#/components/schemas/Book"

    # Book schemas
    Book:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Calculus Textbook"
        pdfUrl:
          type: string
          example: "https://example.com/calculus.pdf"
        course:
          $ref: "#/components/schemas/Course"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    BookRequest:
      type: object
      required: ["name", "pdfUrl", "course"]
      properties:
        name:
          type: string
          example: "Calculus Textbook"
        pdfUrl:
          type: string
          example: "https://example.com/calculus.pdf"
        course:
          type: string
          example: "507f1f77bcf86cd799439011"
    BookResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Book created successfully"
        book:
          $ref: "#/components/schemas/Book"
    BooksResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Books retrieved successfully"
        books:
          type: array
          items:
            $ref: "#/components/schemas/Book"

    # Note schemas
    Note:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        session:
          $ref: "#/components/schemas/Session"
        content:
          type: string
          example: "This is an important concept"
        timestamp:
          type: number
          example: 120
        order:
          type: number
          example: 1
        type:
          type: string
          enum: [text, ai_summary, ai_explanation, highlight]
          example: "text"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NoteRequest:
      type: object
      required: ["session", "content", "timestamp", "order"]
      properties:
        session:
          type: string
          example: "507f1f77bcf86cd799439011"
        content:
          type: string
          example: "This is an important concept"
        timestamp:
          type: number
          example: 120
        order:
          type: number
          example: 1
        type:
          type: string
          enum: [text, ai_summary, ai_explanation, highlight]
          example: "text"
    NoteResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Note created successfully"
        note:
          $ref: "#/components/schemas/Note"
    NotesResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Notes retrieved successfully"
        notes:
          type: array
          items:
            $ref: "#/components/schemas/Note"

    # Session schema (referenced by notes)
    Session:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        title:
          type: string
          example: "Lecture 1: Introduction"
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time

    # Existing schemas
    Student:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
        email:
          type: string
          format: email
          example: "momen@gmail.com"
        name:
          type: string
          example: "Momena"
        university:
          type: string
          example: "NUST"
        photo:
          type: string
          example: "https://example.com/photo.jpg"
        courses:
          type: array
          items:
            type: string
          example: ["507f1f77bcf86cd799439012"]
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        student:
          $ref: "#/components/schemas/Student"
    SignupRequest:
      type: object
      required: ["email", "password", "name", "university"]
      properties:
        email:
          type: string
          format: email
          example: "momen@gmail.com"
        password:
          type: string
          minLength: 6
          example: "password123"
        name:
          type: string
          example: "Momena"
        university:
          type: string
          example: "NUST"
        photo:
          type: string
          example: "https://example.com/photo.jpg"
    LoginRequest:
      type: object
      required: ["email", "password"]
      properties:
        email:
          type: string
          format: email
          example: "momen@gmail.com"
        password:
          type: string
          example: "password123"
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Invalid email or password"
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: JWT token stored in httpOnly cookie
security:
  - cookieAuth: []
