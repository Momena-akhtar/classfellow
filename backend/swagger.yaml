openapi: 3.0.0
info:
  title: ClassFellow API
  version: 1.0.0
  description: Real-time note-taking app for lectures with AI-powered summaries and transcriptions
  contact:
    name: ClassFellow API
servers:
  - url: http://localhost:5500
    description: Development server
paths:
  /auth/signup:
    post:
      summary: Register a new student
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
            example:
              email: momen@gmail.com
              password: password123
              name: Momena
              university: NUST
              photo: https://example.com/photo.jpg
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                success: true
                message: Student created successfully
                student:
                  id: 507f1f77bcf86cd799439011
                  email: momen@gmail.com
                  name: Momena
                  university: NUST
                  photo: https://example.com/photo.jpg
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Email, password, name, and university are required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      summary: Login student
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: momen@gmail.com
              password: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                success: true
                message: Login successful
                student:
                  id: 507f1f77bcf86cd799439011
                  email: momen@gmail.com
                  name: Momena
                  university: NUST
                  photo: https://example.com/photo.jpg
          headers:
            Set-Cookie:
              description: JWT token stored in httpOnly cookie
              schema:
                type: string
                example: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Invalid email or password
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    post:
      summary: Logout student
      tags: [Authentication]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully
          headers:
            Set-Cookie:
              description: JWT token cookie cleared
              schema:
                type: string
                example: token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT
        '401':
          description: Unauthorized - token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Access token required
  /auth/profile:
    get:
      summary: Get current student profile
      tags: [Authentication]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Student profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  student:
                    $ref: '#/components/schemas/Student'
              example:
                success: true
                student:
                  id: 507f1f77bcf86cd799439011
                  email: momen@gmail.com
                  name: Momena
                  university: NUST
                  photo: https://example.com/photo.jpg
                  courses: ["507f1f77bcf86cd799439012"]
        '401':
          description: Unauthorized - token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Access token required
components:
  schemas:
    Student:
      type: object
      properties:
        id:
          type: string
          example: '507f1f77bcf86cd799439011'
        email:
          type: string
          format: email
          example: 'momen@gmail.com'
        name:
          type: string
          example: 'Momena'
        university:
          type: string
          example: 'NUST'
        photo:
          type: string
          example: 'https://example.com/photo.jpg'
        courses:
          type: array
          items:
            type: string
          example: ['507f1f77bcf86cd799439012']
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Login successful'
        student:
          $ref: '#/components/schemas/Student'
    SignupRequest:
      type: object
      required: ['email', 'password', 'name', 'university']
      properties:
        email:
          type: string
          format: email
          example: 'momen@gmail.com'
        password:
          type: string
          minLength: 6
          example: 'password123'
        name:
          type: string
          example: 'Momena'
        university:
          type: string
          example: 'NUST'
        photo:
          type: string
          example: 'https://example.com/photo.jpg'
    LoginRequest:
      type: object
      required: ['email', 'password']
      properties:
        email:
          type: string
          format: email
          example: 'momen@gmail.com'
        password:
          type: string
          example: 'password123'
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: 'Invalid email or password'
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: JWT token stored in httpOnly cookie
security:
  - cookieAuth: []
